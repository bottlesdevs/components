name: CI

on:
  schedule:
    # Check for update every day at 07:11
    - cron:  '11 7 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PR_BRANCH: ci/${{ github.ref_name }}

concurrency: 
  # Github Actions does not support ${{ env.PR_BRANCH }} as group name...
  group: ci/${{ github.ref_name }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: "bottle-components-repository"
          ref: ${{ github.ref_name }}
      
      - name: Create or reset ${{ env.PR_BRANCH }}
        working-directory: "bottle-components-repository"
        run: |
          git checkout -B ${{ env.PR_BRANCH }}
          git push -f --set-upstream origin ${{ env.PR_BRANCH }}

  pull:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        components: [
            {repo : "doitsujin/dxvk"                  , workflow: "artifacts.yml"          , branch: "master", name-prefix: "dxvk-"        , version-prefix: "v"        , Category: "dxvk"       , Sub-category: ""      , yaml-file: "14-dxvk.yml"         },
            {repo : "HansKristian-Work/vkd3d-proton"  , workflow: "artifacts.yml"          , branch: "master", name-prefix: "vkd3d-proton-", version-prefix: "v"        , Category: "vkd3d"      , Sub-category: ""      , yaml-file: "13-vkd3d-proton.yml" },
            {repo : "bottlesdevs/wine"                , workflow: ""                       , branch: "soda"  , name-prefix: "soda-"        , version-prefix: "soda-"    , Category: "runners"    , Sub-category: "wine"  , yaml-file: "3-soda.yml"          },
            {repo : "bottlesdevs/wine"                , workflow: ""                       , branch: "caffe" , name-prefix: "caffe-"       , version-prefix: "caffe-"   , Category: "runners"    , Sub-category: "wine"  , yaml-file: "4-caffe.yml"         },
            {repo : "GloriousEggroll/wine-ge-custom"  , workflow: ""                       , branch: "master", name-prefix: "wine-"        , version-prefix: ""         , Category: "runners"    , Sub-category: "wine"  , yaml-file: "5-wine-GE-Proton.yml"},
            {repo : "GloriousEggroll/proton-ge-custom", workflow: ""                       , branch: "master", name-prefix: "GE-Proton"    , version-prefix: "GE-Proton", Category: "runners"    , Sub-category: "proton", yaml-file: "10-GE-Proton.yml"    },
            {repo : "ishitatsuyuki/LatencyFleX"       , workflow: "artifact.yml"           , branch: "master", name-prefix: "latencyflex-" , version-prefix: ""         , Category: "latencyflex", Sub-category: ""      , yaml-file: "17-latencyflex.yml"  },
            {repo : "jp7677/dxvk-nvapi"               , workflow: "artifacts.yml"          , branch: "master", name-prefix: "dxvk-nvapi-"  , version-prefix: ""         , Category: "nvapi"      , Sub-category: ""      , yaml-file: "16-dxvk-nvapi.yml"   },
            {repo : "Sporif/dxvk-async"               , workflow: ""                       , branch: "master", name-prefix: "dxvk-async-"  , version-prefix: ""         , Category: "dxvk"       , Sub-category: ""      , yaml-file: "15-dxvk-async.yml"   },
          ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: "bottle-components-repository"
          ref: ${{ env.PR_BRANCH }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x' 
          cache: 'pip'
          cache-dependency-path: 'bottle-components-repository/input_files/requirements-dev.txt'

      # Also needs python3-pip, zstd, gawk and gh packages which are pre-installed
      - run: pip install -r bottle-components-repository/input_files/requirements-dev.txt

      - name: Check for new release
        id: check-release
        shell: bash {0}
        run: |
          latest_release=$(gh release list -R ${{ matrix.components.repo }} | grep -m1 "${{ matrix.components.version-prefix }}" | awk '{print $(NF-1)}')
          if [ -z "$latest_release" ]; then
            echo "::error::Cannot find release tag begining by: ${{ matrix.components.version-prefix }}"
            exit 1
          fi
          asset_name=" "
          found=false
          i=-1
          until [ -z "$asset_name" ] || [ "$found" = true ]; do
            i=$((i + 1))
            asset_name=$(gh release view "$latest_release" --json assets -q ".[] | .[$i] | .name" -R ${{ matrix.components.repo }})
            if [[ "$asset_name" =~ ${{ matrix.components.name-prefix }}.*[0-9]+\.tar.* ]]; then
              found=true
            fi
          done
          if [ "$found" = false ]; then
            echo "::error::Cannot find asset name begining by: ${{ matrix.components.name-prefix }}"
            exit 1
          else
            asset_json=$(gh release view "$latest_release" --json assets -q ".[] | .[$i]" -R ${{ matrix.components.repo }})
            echo "asset=$asset_json" >> $GITHUB_OUTPUT
            echo "version=${latest_release#${{ matrix.components.version-prefix }}}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v3
        with:
          repository: bottlesdevs/tools
          path: "tools"

      - name: Define environment variables
        run: |
          lowercase_component_name=$(echo "${{ matrix.components.name-prefix }}${{ steps.check-release.outputs.version }}" | tr "[:upper:]" "[:lower:]")
          echo "NAMEPREFIX=$(echo ${{ matrix.components.name-prefix }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "NAME=$lowercase_component_name" >> $GITHUB_ENV
          echo "CATEGORY=${{ matrix.components.Category }}" >> $GITHUB_ENV
          echo "SUBCATEGORY=${{ matrix.components.Sub-category }}" >> $GITHUB_ENV
          echo "CHANNEL=stable" >> $GITHUB_ENV
          echo "YAML_FILENAME=${{ matrix.components.yaml-file }}" >> $GITHUB_ENV
          echo "CREATED_AT=${{ fromJSON(steps.check-release.outputs.asset).createdAt }}" >> $GITHUB_ENV
          echo "UPDATED=false" >> $GITHUB_ENV


      - name: Update stable input_file entry
        working-directory: "bottle-components-repository"
        run: |
          # This script can set env.UPDATED to true
          ./input_files/update_yml_entries.sh

      - name: Create release tar archive
        if: env.UPDATED == 'true'
        working-directory: "bottle-components-repository"
        run: |
          release_archive_url=${{ fromJSON(steps.check-release.outputs.asset).url }}
          release_archive_name=${{ fromJSON(steps.check-release.outputs.asset).name }}
          if [[ $release_archive_name == *".tar.zst" ]]; then
            curl -fsSLO "$release_archive_url"
            tar --use-compress-program=unzstd -xvf $release_archive_name
            tar -zcvf "${{ env.NAME }}.tar.gz" "${{ env.NAME }}"
            echo "UPLOAD_FILE=$(pwd)/${{ env.NAME }}.tar.gz" >> $GITHUB_ENV
          elif [[ $release_archive_name == "dxvk-nvapi"* ]]; then
            curl -fsSLO "$release_archive_url"
            mkdir "${{ env.NAME }}"
            tar -xvf $release_archive_name --directory "${{ env.NAME }}"
            tar -zcvf "${{ env.NAME }}.tar.gz" "${{ env.NAME }}"
            echo "UPLOAD_FILE=$(pwd)/${{ env.NAME }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Check for new artifact
        id: download-artifact
        if: matrix.components.workflow != '' && env.UPDATED != 'true'
        shell: bash {0}
        run: |
          run_id=$(gh run list -b ${{ matrix.components.branch }} -w ${{ matrix.components.workflow }} -R ${{ matrix.components.repo }} --json databaseId -q '.[] | .databaseId' --status success -L 1)
          status=$?
          if [ $status -ne 0 ]; then
            echo "::error::Could not get run ID of last successful run."
            exit 1
          fi
          found_artifact=true
          gh run download -R ${{ matrix.components.repo }} $run_id -D artifact
          status=$?
          if [ $status -ne 0 ]; then
            echo "::warning::Could not download artifact, probably expired."
            found_artifact=false
          else
            artifact_info=$(gh run view -R ${{ matrix.components.repo }} $run_id --json headSha,createdAt -q '.')
            echo "artifact_info=$artifact_info" >> $GITHUB_OUTPUT
          fi
          echo "found_artifact=$found_artifact" >> $GITHUB_OUTPUT

      - name: Update environment variables
        if: env.UPDATED != 'true' && steps.download-artifact.outputs.found_artifact == 'true'
        run: |
          commit_sha1="${{ fromJSON(steps.download-artifact.outputs.artifact_info).headSha }}"
          echo "NAME=${{ env.NAME }}-1-${commit_sha1::7}" >> $GITHUB_ENV
          echo "CHANNEL=unstable" >> $GITHUB_ENV
          echo "CREATED_AT=${{ fromJSON(steps.download-artifact.outputs.artifact_info).createdAt }}" >> $GITHUB_ENV

      - name: Update unstable input_file entry
        if: env.UPDATED != 'true' && steps.download-artifact.outputs.found_artifact == 'true'
        working-directory: "bottle-components-repository"
        run: |
          # This script can set env.UPDATED to true
          ./input_files/update_yml_entries.sh

      - name: Create artifact tar archive
        if: env.UPDATED == 'true' && steps.download-artifact.outputs.found_artifact == 'true'
        working-directory: "bottle-components-repository"
        run: |
          folder=$(find "${{ github.workspace }}/artifact" -name "${{ env.NAMEPREFIX }}*")
          # Components specific tweaks
          if [[ "${{ env.NAMEPREFIX }}" == "dxvk"* ]]; then
            rm -rf "$folder/usr"
          fi
          mkdir "${{ env.NAME }}"
          mv "$folder"/* "${{ env.NAME }}"
          tar -zcvf "${{ env.NAME }}.tar.gz" "${{ env.NAME }}"
          echo "UPLOAD_FILE=$(pwd)/${{ env.NAME }}.tar.gz" >> $GITHUB_ENV

      - name: Upload component archive
        id: upload-component
        if: env.UPLOAD_FILE != ''
        shell: bash {0}
        run: |
          gh release create "${{ env.NAME }}" ${{ env.UPLOAD_FILE }} -n ""
          status=$?
          if [ $status -ne 0 ]; then
            gh release upload "${{ env.NAME }}" ${{ env.UPLOAD_FILE }} --clobber
            status=$?
            if [ $status -ne 0 ]; then
              echo "::error::Could not upload component."
            fi
          fi
          asset=$(gh release view "${{ env.NAME }}" --json assets -q ".[] | .[0]")
          echo "asset=$asset" >> $GITHUB_OUTPUT

      - name : Generate appropriate YAML file
        if: env.UPDATED == 'true'
        working-directory: "bottle-components-repository"
        run: |
          repo=${{ matrix.components.repo }}
          if [ "${{ env.UPLOAD_FILE }}" != "" ]; then
            url="${{ steps.upload-component.outputs.asset && fromJSON(steps.upload-component.outputs.asset).url }}"
            path="${{ env.UPLOAD_FILE }}"
          else
            url="${{ fromJSON(steps.check-release.outputs.asset).url }}"
          fi
          python "${{ github.workspace }}/tools/MaintainersHelpers/component-generator.py" "components" "${repo%/*}" "${{ env.NAME }}" "${repo%/*}" "${{ env.CHANNEL }}" "$url" $path
          # Components specific tweaks
          if [[ "${{ env.NAME }}" == "wine-ge"* ]]; then
            echo "Post:" >> "${{ env.NAME }}.yml"
            echo -e "- action: rename" >> "${{ env.NAME }}.yml"
            echo -e "  source: lutris-${{ steps.check-release.outputs.version }}" >> "${{ env.NAME }}.yml"
            echo -e "  dest: ${{ env.NAME }}" >> "${{ env.NAME }}.yml"
          fi
          mv "${{ env.NAME }}.yml" "${{ env.CATEGORY }}/${{ env.SUBCATEGORY }}"

      - name : Commit changes
        if: env.UPDATED == 'true'
        working-directory: "bottle-components-repository"
        timeout-minutes: 10
        shell: bash {0}
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add "${{ env.CATEGORY }}/${{ env.SUBCATEGORY }}/*.yml" "input_files/${{ env.YAML_FILENAME }}"
          git pull
          git commit -m "Update ${{ env.YAML_FILENAME }}"
          git push
          success=$?
          until [ $success -eq 0 ]; do
            git pull --rebase;
            git push
            success=$?
          done

  finish:
    needs: [prepare, pull]
    if: always() && needs.prepare.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: "bottle-components-repository"
          ref: ${{ env.PR_BRANCH }}
          fetch-depth: 0

      - name: Generate index.yml
        working-directory: "bottle-components-repository"
        run: |
          git checkout ${{ github.ref_name }}
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git merge ${{ env.PR_BRANCH }}
          ./generate_index.sh
          git add index.yml
          git commit -m "Generate index.yml" || true

      - name: Create Pull Request
        id: cpr
        working-directory: "bottle-components-repository"
        shell: bash {0}
        run: |
          git checkout -B pr/${{ env.PR_BRANCH }}
          git push -f --set-upstream origin pr/${{ env.PR_BRANCH }}

          gh_output=$(gh pr create --title "Update available :tada:" --body "One or more components have been updated!" --head pr/${{ env.PR_BRANCH }} --base ${{ github.ref_name }})
          echo "PR_CREATED=$([ $? -eq 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
          pr_number=$($gh_output | tail -n1)
          echo "PR_NUMBER=${pr_number#https://github.com/${{ github.repository }}/pull/}" >> $GITHUB_OUTPUT
        env:
          # PAT is not necessary unless auto-merge is used
          # GH_TOKEN: ${{secrets.PAT}}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable Pull Request Automerge
        if: false
        # if: steps.cpr.outputs.PR_CREATED == 'true'
        run: gh pr merge --merge --auto "${{ steps.cpr.outputs.PR_NUMBER }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto approve
        if: false
        # if: steps.cpr.outputs.PR_CREATED == 'true'
        run: gh pr review --approve "${{ steps.cpr.outputs.PR_NUMBER }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}